name: Azure Managed Pool - Basic setup test
run-name: Azure Managed Pool - Basic setup test

on:
    schedule:
        - cron: "15 06 * * 2" 
    workflow_dispatch:
    
env:
  BadgeName: 'AzureManagedPool'
  BadgeLabel: 'AzureManagedPool'

jobs:
  RunTerraform:
    uses: ./.github/workflows/terraform-execute.yml
    with:
      backend_key: 'managed-pool'
      ado_project_id: 'd3c6c8d1-0ccc-4dc7-9b3a-1d38bbce684c'
      pipeline_id: '1'
      azure_devops_organization_name: 'azure-way'
    secrets: inherit

  ValidateManagedPool:
    runs-on: ubuntu-latest
    needs: RunTerraform

    steps:
      - name: Trigger Azure DevOps Pipeline
        shell: bash  
        env:
            ADO_PAT: ${{ secrets.ADO_PAT }}         # Must be defined in your repo’s “Settings → Secrets”
            ORGANIZATION: "azure-way"
            PROJECT: "basic-pipelines"
            PIPELINE_ID: "1"
        run: |
          # 1. Trigger the pipeline
          echo "Triggering Azure DevOps pipeline ${PIPELINE_ID}..."
          trigger_response=$(curl -s \
            -u :$ADO_PAT \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -d '{"resources": {"repositories": {"self": {"refName": "refs/heads/main"}}}}' \
            "https://dev.azure.com/${ORGANIZATION}/${PROJECT}/_apis/pipelines/${PIPELINE_ID}/runs?api-version=7.1")

          # 2. Extract the 'id' field from the JSON response
          run_id=$(echo "$trigger_response" | jq -r '.id')
          echo "Azure DevOps pipeline run id is: $run_id"

          # If run_id is empty, fail immediately
          if [ -z "$run_id" ] || [ "$run_id" = "null" ]; then
            echo "Error: Could not parse run_id from pipeline trigger response."
            echo "Full response: $trigger_response"
            exit 1
          fi

          # 3. Poll the pipeline status until it completes
          echo "Waiting for pipeline run $run_id to complete..."
          max_attempts=60    # ~20 mins if we sleep 20s each loop
          attempt=1

          while [ $attempt -le $max_attempts ]
          do
            run_status_json=$(curl -s \
              -u :$ADO_PAT \
              -H "Accept: application/json" \
              "https://dev.azure.com/${ORGANIZATION}/${PROJECT}/_apis/pipelines/${PIPELINE_ID}/runs/${run_id}?api-version=7.1")

            # Example fields: .state can be "inProgress", "completed", etc.
            #                 .result can be "succeeded", "canceled", "failed" once completed
            state=$(echo "$run_status_json" | jq -r '.state')
            result=$(echo "$run_status_json" | jq -r '.result')

            echo "Attempt #$attempt - state: $state, result: $result"

            if [ "$state" = "completed" ]; then
              # 4. Check final result
              if [ "$result" = "succeeded" ]; then
                echo "Azure DevOps pipeline completed successfully!"
                exit 0
              else
                echo "Azure DevOps pipeline failed or was canceled. Result: $result"
                exit 1
              fi
            fi

            sleep 20
            ((attempt++))
          done

          # If we exit the loop, it means pipeline hasn't completed in time
          echo "Azure DevOps pipeline did not complete within the allotted time."
          exit 1          
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"          

      - name: Build-A-Badge-Success
        if: success()
        uses: peterrhodesdev/build-a-badge@v1.3.0
        with:
            token: ${{ secrets.GITHUB_TOKEN }}
            filename: ${{ env.BadgeName}}
            label: ${{ env.BadgeLabel }}
            message: "build date: ${{ steps.date.outputs.date }}"
            namedLogo: github
            labelColor: "#008000"
            color: "#3272d3"
  
      - name: Build-A-Badge-Failure
        if: failure()
        uses: peterrhodesdev/build-a-badge@v1.3.0
        with:
            token: ${{ secrets.GITHUB_TOKEN }}
            filename: ${{ env.BadgeName}}
            label: ${{ env.BadgeLabel }}
            message: "build date: ${{ steps.date.outputs.date }}"
            namedLogo: github
            labelColor: "#FF0000"
            color: "#3272d3"   

  RunDestroyTerraform:
    needs: ValidateManagedPool
    uses: ./.github/workflows/terraform-destroy.yml
    with:
        backend_key: 'managed-pool'
        ado_project_id: 'd3c6c8d1-0ccc-4dc7-9b3a-1d38bbce684c'
        pipeline_id: '1'
        azure_devops_organization_name: 'azure-way'
    secrets: inherit     